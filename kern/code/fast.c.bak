/*
 *  Software Name : bmc-cache
 *  SPDX-FileCopyrightText: Copyright (c) 2021 Orange
 *  SPDX-License-Identifier: LGPL-2.1-only
 *
 *  This software is distributed under the
 *  GNU Lesser General Public License v2.1 only.
 *
 *  Author: Yoann GHIGOFF <yoann.ghigoff@orange.com> et al.
 */

// 4.30 看了脚手架相关知识，有新的理解，顺便对照着eBPF和libbpf手册，重新注释fast_user.c 
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <signal.h>
#include <time.h>
#include <assert.h>
#include <errno.h>
#include <sys/resource.h>
#include <asm-generic/posix_types.h>
#include <linux/if_link.h>
#include <linux/limits.h>

#include <linux/bpf.h>
#include <bpf/bpf.h>
#include <bpf/libbpf.h>
//0513
#include "fast.skel.h"
#include "fast_common.h"

#define BPF_SYSFS_ROOT "/sys/fs/bpf"


struct bpf_progs_desc {
	char name[256];
	enum bpf_prog_type type;// 
	unsigned char pin;
	int map_prog_idx;// 这个全是大写字母的宏在fast_common.h
	struct bpf_program *prog;// 
};
// define our eBPF program.
// 第一个参数 对应 fast_kern 的 SEC
// TYPE更多信息参见https://ebpf-docs.dylanreimerink.nl/linux/program-type/BPF_PROG_TYPE_SCHED_CLS/
static struct bpf_progs_desc progs[] = {
	{"fastPaxos", BPF_PROG_TYPE_XDP, 0, -1, NULL},// xdp-dispatcher
	{"HandlePrepare", BPF_PROG_TYPE_XDP, 0, FAST_PROG_XDP_HANDLE_PREPARE, NULL}, //fACK1
	{"HandlePrepareOK", BPF_PROG_TYPE_XDP, 0, FAST_PROG_XDP_HANDLE_PREPAREOK, NULL}, // wait on QUORUM
	{"HandleRequest", BPF_PROG_TYPE_XDP, 0, FAST_PROG_XDP_HANDLE_REQUEST, NULL}, // not used
	{"WriteBuffer", BPF_PROG_TYPE_XDP, 0, FAST_PROG_XDP_WRITE_BUFFER, NULL}, //fACK2
	{"PrepareFastReply", BPF_PROG_TYPE_XDP, 0, FAST_PROG_XDP_PREPARE_REPLY, NULL}, //fACK3

	{"FastBroadCast", BPF_PROG_TYPE_SCHED_CLS, 1, -1, NULL},
};

// 这几个struct 在libbpf中定义
struct bpf_object *obj;
struct bpf_object_load_attr load_attr;// bpf_object__load时用
int err, prog_count;
int xdp_main_prog_fd;
char filename[PATH_MAX];
char commandname[PATH_MAX];
__u32 xdp_flags = 0;
int *interfaces_idx;
// fd : File Descripter 进程级资源，可用此访问创建的socket
int map_progs_fd, map_progs_xdp_fd, map_progs_tc_fd, map_paxos_ctr_state_fd;
int map_prepare_buffer_fd, map_configure_fd, map_request_buffer_fd;
int interface_count = 0;
static int nr_cpus = 0;


//解析命令行指令，_user.c必备，设置flag，interface index等参数，在main函数里link时会用到
void parse_cmdline(int argc, char *argv[]) {
	// 参看makefile和Electrode运行输入的指令推断 
	// 指令 : sudo ./fast ens1f1np1
	// argc = 2 argv[] = {"./fast" , "ensf1np1"}
	// optind 在 <unistd.h> 中定义，全局变量，指示下一个要处理命令行参数，除了最前面的elf程序名
	// 调用getopt()时自动递增，初始值为1
	snprintf(filename, sizeof(filename), "%s_kern.o", argv[0]);// 生成一个文件名fast_kern.o
	interface_count = argc - optind; // 网络接口数量 2 - 1 = 1，就是ens1f1np1
	if (interface_count <= 0) {
		fprintf(stderr, "Missing at least one required interface index\n");
		exit(EXIT_FAILURE);
	}

	interfaces_idx = calloc(sizeof(int), interface_count);
	if (interfaces_idx == NULL) {
		fprintf(stderr, "Error: failed to allocate memory\n");
		exit(1); // return 1;
	}

	for (int i = 0; i < interface_count && optind < argc; i++) {
		// printf("%d\n", if_nametoindex(argv[optind]));
		// if_nametoindex在linux kernel中定义
		// 指定网络接口名称字符串作为参数；若该接口存在，则返回相应的索引，否则返回0
		// 是根据本地来看的，ifconfig从上到下输出的端口分别index是1、2、3...
		// 可以自己跑这个程序试试https://blog.csdn.net/qq_45689245/article/details/126212424
		// 怪的是头文件不一样
		interfaces_idx[i] = if_nametoindex(argv[optind + i]);//存储网络接口
	}

	// asd123www: XDP_FLAGS_DRV_MODE not supported! use XDP_FLAGS_SKB_MODE.
	xdp_flags = XDP_FLAGS_UPDATE_IF_NOEXIST | XDP_FLAGS_DRV_MODE;// TYPE对应一些FLAGS
	// IF_NOEXIT 内核只在当前没XDP程序时attach  以Driver 模式加载//
	nr_cpus = libbpf_num_possible_cpus();// libbpf提供 获取cpu数量
	// libbpf手册：https://libbpf.readthedocs.io/en/latest/api.html
}

// 从kern.o中获取几个ebpf程序的指针，然后set TYPE；并获取5个map的fd，两个是map_prog，三个用于后面pin
void create_object() {
	obj = bpf_object__open(filename);// filename 是 _kern.c编译出来的 bpf字节码
	if (!obj) {
		fprintf(stderr, "Error: bpf_object__open failed\n");
		exit(1); //return 1;
	}
	
	//初始化 7个 ebpf程序
	prog_count = sizeof(progs) / sizeof(progs[0]);
	for (int i = 0; i < prog_count; i++) {
		printf("progname: %s\n", progs[i].name);
		// 所以bpf_progs_desc progs[]的第一个字符串要跟kern.c的SEC一致
		progs[i].prog = bpf_object__find_program_by_title(obj, progs[i].name);
		// 奇怪这个函数在eBPF文档和libbpf文档都找不到，只看到bpf_object__find_program_by_name//
		if (!progs[i].prog) {
			fprintf(stderr, "Error: bpf_object__find_program_by_title failed\n");
			exit(1); //return 1;
		}
		bpf_program__set_type(progs[i].prog, progs[i].type);
	}
	
	load_attr.obj = obj;// attribute
	load_attr.log_level = LIBBPF_WARN;// 只记录警告信息

	/* Load/unload object into/from kernel */
	err = bpf_object__load_xattr(&load_attr);// 这一句将7个程序加载进内核了
	if (err) {
		fprintf(stderr, "Error: bpf_object__load_xattr failed\n");
		exit(1); //return 1;
	}
	// kernel中用到的5个map，返回一个fd给用户程序使用
	// 五次寻找结构一致，但前两和后三的map TYPE地位不同
	map_progs_xdp_fd = bpf_object__find_map_fd_by_name(obj, "map_progs_xdp");
	if (map_progs_xdp_fd < 0) {
		fprintf(stderr, "Error: bpf_object__find_map_fd_by_name failed\n");
		exit(1); //return 1;
	}
	map_progs_tc_fd = bpf_object__find_map_fd_by_name(obj, "map_progs_tc");
	if (map_progs_tc_fd < 0) {
		fprintf(stderr, "Error: bpf_object__find_map_fd_by_name failed\n");
		exit(1);
		// return 1;
	}


	map_prepare_buffer_fd = bpf_object__find_map_fd_by_name(obj, "map_prepare_buffer");
	if (map_prepare_buffer_fd < 0) {
		fprintf(stderr, "Error: bpf_object__find_map_fd_by_name failed\n");
		exit(1); //return 1;
	}
	map_request_buffer_fd = bpf_object__find_map_fd_by_name(obj, "map_request_buffer");
	if (map_request_buffer_fd < 0) {
		fprintf(stderr, "Error: bpf_object__find_map_fd_by_name failed\n");
		exit(1); //return 1;
	}
	map_paxos_ctr_state_fd = bpf_object__find_map_fd_by_name(obj, "map_ctr_state");
	if (map_paxos_ctr_state_fd < 0) {
		fprintf(stderr, "Error: bpf_object__find_map_fd_by_name failed\n");
		exit(1); //return 1;
	}
}


// 设置了 map_progs 然后 pin了要pin的函数，即fast_boardcast；获取xdp-handler的fd，存入map_prog
void initial_prog_map () {
	for (int i = 0; i < prog_count; i++) {
		int prog_fd = bpf_program__fd(progs[i].prog);

		if (prog_fd < 0) {
			fprintf(stderr, "Error: Couldn't get file descriptor for program %s\n", progs[i].name);
			exit(1); //return 1;
		}

		if (progs[i].map_prog_idx != -1) {// -1 有fast_boardcast和fast_paxos；其它5个xdp程序进入
			// 因为这两个fast在main()里已经link入内核，剩下5个则通过map_prog和tail call来调用
			unsigned int map_prog_idx = progs[i].map_prog_idx;
			if (map_prog_idx < 0) {
				fprintf(stderr, "Error: Cannot get prog fd for bpf program %s\n", progs[i].name);
				exit(1); //return 1;
			}

			switch (progs[i].type) {
			case BPF_PROG_TYPE_XDP:
				map_progs_fd = map_progs_xdp_fd;
				break;
			case BPF_PROG_TYPE_SCHED_CLS:// 只有fast_boardcast是这个，但是上面if==-1所以无
				map_progs_fd = map_progs_tc_fd;
				break;
			default:
				fprintf(stderr, "Error: Program type doesn't correspond to any prog array map\n");
				exit(1); //return 1;
			}

			// update map in bpf_tail_call, e.g. f[idx] = fd.
			//
			err = bpf_map_update_elem(map_progs_fd, &map_prog_idx, &prog_fd, 0);// 在对应的map中存放idx，其中idx是.h里的enum
			if (err) {
				fprintf(stderr, "Error: bpf_map_update_elem failed for prog array map\n");
				exit(1); // return 1;
			}
		}

		if (progs[i].pin) {// 唯有 fast_boardcast
			int len = snprintf(filename, PATH_MAX, "%s/%s", BPF_SYSFS_ROOT, progs[i].name);// sys/fs/bpf/FastBroadCast
			if (len < 0) {
				fprintf(stderr, "Error: Program name '%s' is invalid\n", progs[i].name);
				exit(-1); // return -1;
			} else if (len >= PATH_MAX) {
				fprintf(stderr, "Error: Program name '%s' is too long\n", progs[i].name);
				exit(-1); // return -1;
			}
retry:
			if (bpf_program__pin_instance(progs[i].prog, filename, 0)) {// 把加载了的代码钉住
				fprintf(stderr, "Error: Failed to pin program '%s' to path %s\n", progs[i].name, filename);
				if (errno == EEXIST) {// 同名文件存在
					fprintf(stdout, "BPF program '%s' already pinned, unpinning it to reload it\n", progs[i].name);
					if (bpf_program__unpin_instance(progs[i].prog, filename, 0)) {
						fprintf(stderr, "Error: Fail to unpin program '%s' at %s\n", progs[i].name, filename);
						exit(-1);
						// return -1;
					}
					goto retry;// 去除同名文件然后再pin
				}
				exit(-1);
				// return -1;
			}
		}
	}

	xdp_main_prog_fd = bpf_program__fd(progs[0].prog);
	if (xdp_main_prog_fd < 0) {
		fprintf(stderr, "Error: bpf_program__fd failed\n");
		exit(1); // return 1;
	}
}

// _user.c必备，处理control + C等终止，妥善结束程序
void add_interrupt() {
	// 什么意思？
	/* asd123www: 
		!!!!!! the user-space program shouldn't quit here.
				Otherwise the program will be lost, due to fd lost???
	*/
	// 关中断，确保进程在关键部分（如初始化或清理操作）不会被中断
	sigset_t signal_mask;
	sigemptyset(&signal_mask);
	sigaddset(&signal_mask, SIGINT);
	sigaddset(&signal_mask, SIGTERM);
	sigaddset(&signal_mask, SIGUSR1);

	int sig, cur_poll_count = 0, quit = 0;
	// FILE *fp = NULL;

	err = sigprocmask(SIG_BLOCK, &signal_mask, NULL);
	if (err != 0) {
		fprintf(stderr, "Error: Failed to set signal mask\n");
		exit(EXIT_FAILURE);
	}

	while (!quit) {
		err = sigwait(&signal_mask, &sig);
		if (err != 0) {
			fprintf(stderr, "Error: Failed to wait for signal\n");
			exit(EXIT_FAILURE);
		}

		switch (sig) {
			case SIGINT:
			case SIGTERM:
				quit = 1;
				break;

			default:
				fprintf(stderr, "Unknown signal\n");
				break;
		}
	}
	return;
}

// 根据config.txt设置map_configure，包括节点数量、每个节点的网络地址
void read_config() {
	map_configure_fd = bpf_object__find_map_fd_by_name(obj, "map_configure");
	if (map_configure_fd < 0) {
		fprintf(stderr, "Error: bpf_object__find_map_fd_by_name failed\n");
		exit(1); //return 1;
	}

	FILE *fp;
	char buff[255];//暂存字符串
	int f = 0, port = 0;

	struct sockaddr_in sa;
	char str[INET_ADDRSTRLEN];
	struct paxos_configure conf;
	// 待修改
	// 6 * 8位 MAC地址，ifconfig查看ether可以看到，或者ip link指令
	const char *eths[FAST_REPLICA_MAX] = {"9c:dc:71:56:8f:45",
										"9c:dc:71:56:bf:45", 
										"9c:dc:71:5e:2f:51", 
										"", 
										""}; 

	fp = fopen("../config.txt", "r");
	fscanf(fp, "%s", buff); // must be 'f'
	fscanf(fp, "%d", &f);
	for (int i = 0; i < 2*f + 1; ++i) {
		fscanf(fp, "%s", buff); // must be 'replica'
		fscanf(fp, "%s", buff); // eg：10.10.1.3:12345

		char *ipv4 = strtok(buff, ":");
		assert(ipv4 != NULL);
		char *port = strtok(NULL, ":");

		// store this IP address in sa:
		inet_pton(AF_INET, ipv4, &(sa.sin_addr));//将 IP 地址从文本表示转换为二进制表示
		// AF_INET表示IPv4地址族
		// now get it back and print it
		inet_ntop(AF_INET, &(sa.sin_addr), str, INET_ADDRSTRLEN);
		conf.port = htons(atoi(port));// 将其转换为网络字节序（big-endian）
		conf.addr = sa.sin_addr.s_addr;
		sscanf(eths[i], "%x:%x:%x:%x:%x:%x", conf.eth, conf.eth + 1, conf.eth + 2, conf.eth + 3, conf.eth + 4, conf.eth + 5);
		err = bpf_map_update_elem(map_configure_fd, &i, &conf, 0);
	}

	fclose(fp);
	return;
}

int main(int argc, char *argv[]) {

	parse_cmdline(argc, argv);
	create_object();
	initial_prog_map();
	read_config();

	assert(bpf_obj_pin(map_prepare_buffer_fd, "/sys/fs/bpf/paxos_prepare_buffer") == 0);
	assert(bpf_obj_pin(map_request_buffer_fd, "/sys/fs/bpf/paxos_request_buffer") == 0);
	assert(bpf_obj_pin(map_paxos_ctr_state_fd, "/sys/fs/bpf/paxos_ctr_state") == 0);

	for (int i = 0; i < interface_count; i++) {// 按照Electrode的指令，这里其实就link了一个主函数xdp-handler
		// 猜测其他四个xdp程序是通过尾调用，所以暂时不需要link
		// 这个xdp_flags//
		if (bpf_set_link_xdp_fd(interfaces_idx[i], xdp_main_prog_fd, xdp_flags) < 0) {//这里是附加，钩上去
			fprintf(stderr, "Error: bpf_set_link_xdp_fd failed for interface %d\n", interfaces_idx[i]);
			return 1;
		} else {
			printf("Main BPF program attached to XDP on interface %d\n", interfaces_idx[i]);
		}
	}
	//设置TC规则
	for (int i = 0; i < interface_count && optind < argc; i++) {
		// 参考 https://ebpf-docs.dylanreimerink.nl/linux/program-type/BPF_PROG_TYPE_SCHED_CLS/
		// 为什么要这样attach，跟别的不同？看文档最后面一部分
		// 以下执行了两条指令：在网络qdisc上添加clsact 类型的队列调度规则
		// clsact : 分类（classification）和动作（action）结合使用
		snprintf(commandname, PATH_MAX, "tc qdisc add dev %s clsact", argv[optind + i]);// 就是ens1f1np1
		assert(system(commandname) == 0);
		// egress表示流出，因为就只有fast_boardcast；%s 对应网络设备
		// 这里应该就是将fast_boardcast这个filter加载上去， 相当于link
		snprintf(commandname, PATH_MAX, "tc filter add dev %s egress bpf object-pinned /sys/fs/bpf/FastBroadCast", argv[optind + i]);
		assert(system(commandname) == 0);
		printf("Main BPF program attached to TC on interface %d\n", interfaces_idx[i]);
	}

	add_interrupt();//等待终止信号
	// 卸载
	assert(remove("/sys/fs/bpf/paxos_prepare_buffer") == 0);
	assert(remove("/sys/fs/bpf/paxos_request_buffer") == 0);
	assert(remove("/sys/fs/bpf/paxos_ctr_state") == 0);

	for (int i = 0; i < interface_count; i++) {
		bpf_set_link_xdp_fd(interfaces_idx[i], -1, xdp_flags);
	}
	for (int i = 0; i < interface_count && optind < argc; i++) {
		snprintf(commandname, PATH_MAX, "tc filter del dev %s egress", argv[optind + i]);
		assert(system(commandname) == 0);
		snprintf(commandname, PATH_MAX, "tc qdisc del dev %s clsact", argv[optind + i]);
		assert(system(commandname) == 0);
	}
	assert(system("rm -f /sys/fs/bpf/FastBroadCast") == 0);
	printf("\nasd123www: quit safely!\n");

	return 0;
}

// gcc -g -O2 -Wall -DKBUILD_MODNAME="\"wzz\"" -I. -I./linux/tools/lib -I./linux/tools/include/uapi  -o test fast_test.c ./linux/tools/lib/bpf/libbpf.a -L./linux/tools/lib/bpf -l:libbpf.a -lelf  -lz